plugins {
	id 'java'
	id 'groovy'
	id 'jacoco'
	id 'org.springframework.boot' version '2.2.5.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id "com.gorylenko.gradle-git-properties" version "2.2.2"
	id 'io.swagger.core.v3.swagger-gradle-plugin' version '2.1.2'
	id 'org.hidetake.swagger.generator' version '2.18.2'
	id "org.unbroken-dome.test-sets" version "3.0.1"
	id "org.sonarqube" version "2.8"
}

group = 'com.github.mwierzchowski.helios'
version = System.getenv('VERSION') ?: 'SNAPSHOT'
sourceCompatibility = '1.13'
targetCompatibility = '1.13'

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
	compileOnly {
		extendsFrom annotationProcessor
	}
}

testSets {
	testE2E
}

jacocoTestReport {
	reports {
		xml.enabled true
		html.enabled false
	}
}

tasks.testE2E {
	doFirst {
		logger.info("Waiting for service")
		def healthUrl = "http://localhost:8080/actuator/health"
		ant.waitfor(maxwait: "60", maxwaitunit: "second", checkevery: "500") {
			http(url: healthUrl)
		}
		def code = new URL(healthUrl).openConnection().with {
			requestMethod = 'HEAD'
			connect()
			responseCode
		}
		assert code == 200
	}
}

springBoot {
	buildInfo()
}
tasks.bootBuildInfo.enabled = project.hasProperty("buildInfoEnabled")

repositories {
	mavenCentral()
}

dependencies {
	// Code processors
	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.3.1.Final'

	// Swagger
	swaggerCodegen 'io.swagger.codegen.v3:swagger-codegen-cli:3.0.18'

	// Compilation
	compileOnly 'org.projectlombok:lombok'

	// Implementation
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-jersey'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	implementation 'org.springframework.boot:spring-boot-starter-jersey'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'de.codecentric:spring-boot-admin-starter-client:2.2.3'
	implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.6.1'
	implementation 'org.mapstruct:mapstruct:1.3.1.Final'
	implementation 'io.swagger.core.v3:swagger-jaxrs2:2.1.2'
	implementation 'io.github.resilience4j:resilience4j-spring-boot2:0.16.0'
	implementation 'org.postgresql:postgresql'
	implementation 'org.liquibase:liquibase-core'
	implementation 'com.maxmind.geoip2:geoip2:2.13.1'
	implementation 'org.jeasy:easy-rules-core:3.4.0'

	// Testing unit & integration
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.spockframework:spock-core:1.3-groovy-2.5'
	testImplementation 'org.spockframework:spock-spring:1.3-groovy-2.5'
	testImplementation 'com.github.tomakehurst:wiremock:2.26.3'
	testImplementation 'org.springframework.cloud:spring-cloud-starter:2.2.2.RELEASE'
	testImplementation 'org.springframework.cloud:spring-cloud-contract-wiremock:2.2.2.RELEASE'
	testImplementation 'com.playtika.testcontainers:embedded-postgresql:1.43'
	testImplementation 'org.apache.commons:commons-lang3:3.10'
	testImplementation 'org.reflections:reflections:0.9.12'
	testImplementation 'nl.jqno.equalsverifier:equalsverifier:3.1.13'
	testImplementation 'org.projectlombok:lombok'

	// Testing E2E
	testE2EImplementation 'io.rest-assured:rest-assured'

	// Dev tools
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
}

// External services clients generation
def specsDir = 'src/main/specs'
def owmClientPackage = "org.openweathermap"
def sunapiClientPackage = "org.sunrisesunset"
swaggerSources {
	owm {
		inputFile = file("${specsDir}/owm-spec.yaml")
		code {
			language = 'java'
			library = "resttemplate"
			outputDir = file("$buildDir/generated/sources/owmSwagger")
			additionalProperties = [
					dateLibrary : "java8",
					apiPackage : "${owmClientPackage}.api",
					modelPackage : "${owmClientPackage}.model",
					invokerPackage : "${owmClientPackage}.invoker"
			]
		}
	}
	sunapi {
		inputFile = file("${specsDir}/sunapi-spec.yaml")
		code {
			language = 'java'
			library = "resttemplate"
			outputDir = file("$buildDir/generated/sources/sunapiSwagger")
			additionalProperties = [
					dateLibrary : "java8",
					apiPackage : "${sunapiClientPackage}.api",
					modelPackage : "${sunapiClientPackage}.model",
					invokerPackage : "${sunapiClientPackage}.invoker"
			]
		}
	}
}
compileJava.dependsOn swaggerSources.owm.code
sourceSets.main.java.srcDirs += "${swaggerSources.owm.code.outputDir}/src/main/java"
sourceSets.main.resources.srcDirs += "${swaggerSources.owm.code.outputDir}/src/main/resources"
compileJava.dependsOn swaggerSources.sunapi.code
sourceSets.main.java.srcDirs += "${swaggerSources.sunapi.code.outputDir}/src/main/java"
sourceSets.main.resources.srcDirs += "${swaggerSources.sunapi.code.outputDir}/src/main/resources"